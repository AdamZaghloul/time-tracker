// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: update_activity.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const updateActivity = `-- name: UpdateActivity :one
WITH inserted AS (
    UPDATE activities SET
    activity = CASE WHEN $3::TEXT LIKE '' THEN activity ELSE $3::TEXT END,
    start_time = CASE WHEN $4::TIMESTAMP = '0001-01-01 00:00:00 +0:00' THEN start_time ELSE $4::TIMESTAMP END,
    end_time = CASE WHEN $5::TIMESTAMP = '0001-01-01 00:00:00 +0:00' THEN end_time ELSE $5::TIMESTAMP END,
    updated_at = NOW(),
    project_id = CASE WHEN $6::UUID = '00000000-0000-0000-0000-000000000000' THEN NULL ELSE $6::UUID END,
    category_id = CASE WHEN $7::UUID = '00000000-0000-0000-0000-000000000000' THEN NULL ELSE $7::UUID END
    WHERE activities.id = $1 AND activities.user_id = $2
    RETURNING id, DATE(start_time) AS "date", start_time, end_time, ROUND(EXTRACT(EPOCH FROM (end_time - start_time))/60) AS "duration", activity, category_id, project_id
)

SELECT inserted.id, inserted.date, inserted.start_time, inserted.end_time, inserted.duration, inserted.activity, inserted.category_id, inserted.project_id, c.category, p.project FROM inserted LEFT JOIN categories c ON inserted.category_id = c.id LEFT JOIN projects p ON inserted.project_id = p.id
`

type UpdateActivityParams struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	Activity   string
	StartTime  time.Time
	EndTime    time.Time
	ProjectID  uuid.UUID
	CategoryID uuid.UUID
}

type UpdateActivityRow struct {
	ID         uuid.UUID
	Date       time.Time
	StartTime  time.Time
	EndTime    time.Time
	Duration   float64
	Activity   string
	CategoryID uuid.NullUUID
	ProjectID  uuid.NullUUID
	Category   sql.NullString
	Project    sql.NullString
}

func (q *Queries) UpdateActivity(ctx context.Context, arg UpdateActivityParams) (UpdateActivityRow, error) {
	row := q.db.QueryRowContext(ctx, updateActivity,
		arg.ID,
		arg.UserID,
		arg.Activity,
		arg.StartTime,
		arg.EndTime,
		arg.ProjectID,
		arg.CategoryID,
	)
	var i UpdateActivityRow
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.StartTime,
		&i.EndTime,
		&i.Duration,
		&i.Activity,
		&i.CategoryID,
		&i.ProjectID,
		&i.Category,
		&i.Project,
	)
	return i, err
}
