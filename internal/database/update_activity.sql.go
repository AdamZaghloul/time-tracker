// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: update_activity.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const updateActivity = `-- name: UpdateActivity :one
UPDATE activities SET
    activity = CASE WHEN $1 IS NULL THEN activity ELSE $1 END,
    start_time = CASE WHEN $2 IS NULL THEN start_time ELSE $2 END,
    end_time = CASE WHEN $3 IS NULL THEN end_time ELSE $3 END,
    updated_at = NOW(),
    project_id = CASE WHEN $4 IS NULL THEN project_id ELSE $4 END,
    category_id = CASE WHEN $5 IS NULL THEN category_id ELSE $5 END
WHERE id = $6 AND user_id = $7
RETURNING id, created_at, updated_at, activity, start_time, end_time, user_id, project_id, category_id
`

type UpdateActivityParams struct {
	Activity   string
	StartTime  time.Time
	EndTime    time.Time
	ProjectID  uuid.NullUUID
	CategoryID uuid.NullUUID
	ID         uuid.UUID
	UserID     uuid.UUID
}

func (q *Queries) UpdateActivity(ctx context.Context, arg UpdateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, updateActivity,
		arg.Activity,
		arg.StartTime,
		arg.EndTime,
		arg.ProjectID,
		arg.CategoryID,
		arg.ID,
		arg.UserID,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Activity,
		&i.StartTime,
		&i.EndTime,
		&i.UserID,
		&i.ProjectID,
		&i.CategoryID,
	)
	return i, err
}
