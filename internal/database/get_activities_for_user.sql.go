// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: get_activities_for_user.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getActivitiesForUser = `-- name: GetActivitiesForUser :many
SELECT a.id, DATE(a.start_time) AS "date", a.start_time, a.end_time, ROUND(EXTRACT(EPOCH FROM (a.end_time - a.start_time))/60) AS "duration", a.activity, a.project_id, a.category_id, p.project, c.category FROM activities a LEFT JOIN projects p ON a.project_id::UUID = p.id::UUID LEFT JOIN categories c ON a.category_id::UUID = c.id::UUID WHERE a.user_id = $1 ORDER BY a.start_time DESC
`

type GetActivitiesForUserRow struct {
	ID         uuid.UUID
	Date       time.Time
	StartTime  time.Time
	EndTime    time.Time
	Duration   float64
	Activity   string
	ProjectID  uuid.NullUUID
	CategoryID uuid.NullUUID
	Project    sql.NullString
	Category   sql.NullString
}

func (q *Queries) GetActivitiesForUser(ctx context.Context, userID uuid.UUID) ([]GetActivitiesForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getActivitiesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActivitiesForUserRow
	for rows.Next() {
		var i GetActivitiesForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.StartTime,
			&i.EndTime,
			&i.Duration,
			&i.Activity,
			&i.ProjectID,
			&i.CategoryID,
			&i.Project,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
