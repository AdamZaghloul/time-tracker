// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: get_report_days.sql

package database

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const getReportDays = `-- name: GetReportDays :many
SELECT 
    (r).return_day::DATE as week,
    (r).return_week::DATE as week,
    (r).return_month::TEXT as month,
    (r).return_year::INT as year,
    (r).avg_start_time as start_time,
    (r).category_data::JSONB as category_data,
    (r).project_data::JSONB as project_data 
FROM get_report_days($1, $2, $3, $4) AS r
`

type GetReportDaysParams struct {
	InputUserID uuid.UUID
	InputYear   int32
	InputMonth  string
	InputWeek   time.Time
}

type GetReportDaysRow struct {
	Week         time.Time
	Week_2       time.Time
	Month        string
	Year         int32
	StartTime    interface{}
	CategoryData json.RawMessage
	ProjectData  json.RawMessage
}

// Test UUID 4f0081b0-2e30-47c7-836a-0bc06f7baaab
func (q *Queries) GetReportDays(ctx context.Context, arg GetReportDaysParams) ([]GetReportDaysRow, error) {
	rows, err := q.db.QueryContext(ctx, getReportDays,
		arg.InputUserID,
		arg.InputYear,
		arg.InputMonth,
		arg.InputWeek,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportDaysRow
	for rows.Next() {
		var i GetReportDaysRow
		if err := rows.Scan(
			&i.Week,
			&i.Week_2,
			&i.Month,
			&i.Year,
			&i.StartTime,
			&i.CategoryData,
			&i.ProjectData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
